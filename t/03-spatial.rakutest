use Test;
use lib 'lib';
use GEOS::Native;
use NativeCall;

plan 47;

# [Previous tests remain exactly the same...]

# Add new geometric operation tests with known results
{
    my $context = GEOS_init_r();
    my $reader = GEOSWKTReader_create_r($context);
    my $writer = GEOSWKTWriter_create_r($context);
    
    # Create two squares that overlap
    my $square1 = GEOSWKTReader_read_r($context, $reader, 'POLYGON((0 0, 2 0, 2 2, 0 2, 0 0))');
    my $square2 = GEOSWKTReader_read_r($context, $reader, 'POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))');
    
    # Test intersection
    my $intersection = GEOSIntersection_r($context, $square1, $square2);
    my $intersection_wkt_ptr = GEOSWKTWriter_write_r($context, $writer, $intersection);
    my $intersection_wkt = nativecast(Str, $intersection_wkt_ptr);
    
    # The intersection should be a 1x1 square
    is-deeply $intersection_wkt.trim, 'POLYGON ((1 1, 2 1, 2 2, 1 2, 1 1))', 
        'Intersection result matches expected geometry';
        
    # Test union
    my $union = GEOSUnion_r($context, $square1, $square2);
    my $union_wkt_ptr = GEOSWKTWriter_write_r($context, $writer, $union);
    my $union_wkt = nativecast(Str, $union_wkt_ptr);
    
    # The union should be a 3x3 polygon with a hole
    is-deeply $union_wkt.trim, 'POLYGON ((0 0, 2 0, 2 1, 3 1, 3 3, 1 3, 1 2, 0 2, 0 0))',
        'Union result matches expected geometry';
    
    # Test area calculations (should be exact)
    my $area1 = 0e0;
    my $area2 = 0e0;
    my $intersection_area = 0e0;
    my $union_area = 0e0;
    
    GEOSArea_r($context, $square1, $area1);
    GEOSArea_r($context, $square2, $area2);
    GEOSArea_r($context, $intersection, $intersection_area);
    GEOSArea_r($context, $union, $union_area);
    
    is-approx $area1, 4e0, 0.0001, 'First square has area 4';
    is-approx $area2, 4e0, 0.0001, 'Second square has area 4';
    is-approx $intersection_area, 1e0, 0.0001, 'Intersection has area 1';
    is-approx $union_area, 7e0, 0.0001, 'Union has area 7';
    
    # Test distance calculation
    my $point1 = GEOSWKTReader_read_r($context, $reader, 'POINT(0 0)');
    my $point2 = GEOSWKTReader_read_r($context, $reader, 'POINT(3 4)');
    my $distance = 0e0;
    
    GEOSDistance_r($context, $point1, $point2, $distance);
    is-approx $distance, 5e0, 0.0001, 'Distance between points is 5 (Pythagorean triangle 3-4-5)';
    
    # Cleanup
    lives-ok {
        for $square1, $square2, $intersection, $union, $point1, $point2 -> $geom {
            GEOSGeom_destroy_r($context, $geom);
        }
        GEOSFree_r($context, $intersection_wkt_ptr);
        GEOSFree_r($context, $union_wkt_ptr);
        GEOSWKTReader_destroy_r($context, $reader);
        GEOSWKTWriter_destroy_r($context, $writer);
    }, 'Can cleanup all geometric operations test resources';
    
    GEOS_finish_r($context);
}

done-testing;
